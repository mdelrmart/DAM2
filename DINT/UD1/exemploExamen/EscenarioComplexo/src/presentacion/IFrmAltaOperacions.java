/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import bd.ConsultasSQL;
import clases.Can;
import clases.Operacion;
import clases.Propietario;
import java.awt.event.ItemEvent;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import utilidades.Datas;

/**
 *
 * @author DAM 2 
 */
public class IFrmAltaOperacions extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmAltaOperacions
     */
    public IFrmAltaOperacions() {
        initComponents();
        modeloPropietarios=new DefaultComboBoxModel<Propietario>();
        cmbPropietarios.setModel(modeloPropietarios);    
        modeloCans=new DefaultComboBoxModel<Can>();
        cmbCans.setModel(modeloCans);    
        cargarPropietarios();                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlOperacions = new javax.swing.JPanel();
        lblData = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        lblDescripcion = new javax.swing.JLabel();
        scpDescripcion = new javax.swing.JScrollPane();
        txtarDescripcion = new javax.swing.JTextArea();
        filRecheo = new javax.swing.Box.Filler(new java.awt.Dimension(1, 1), new java.awt.Dimension(1, 1), new java.awt.Dimension(1, 1));
        lblPropietario = new javax.swing.JLabel();
        cmbPropietarios = new javax.swing.JComboBox();
        lblCan = new javax.swing.JLabel();
        cmbCans = new javax.swing.JComboBox();
        pnlBotons = new javax.swing.JPanel();
        btnReservar = new javax.swing.JButton();
        btnPechar = new javax.swing.JButton();
        pnlRecursosNecesarios = new javax.swing.JPanel();
        chkSangue = new javax.swing.JCheckBox();
        chkAnestesia = new javax.swing.JCheckBox();
        chkScaner = new javax.swing.JCheckBox();
        chkRaios = new javax.swing.JCheckBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nova operación");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlOperacions.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos da operación"));
        pnlOperacions.setLayout(new java.awt.GridBagLayout());

        lblData.setText("Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        pnlOperacions.add(lblData, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        pnlOperacions.add(txtData, gridBagConstraints);

        lblDescripcion.setText("Descripción");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        pnlOperacions.add(lblDescripcion, gridBagConstraints);

        txtarDescripcion.setColumns(20);
        txtarDescripcion.setLineWrap(true);
        txtarDescripcion.setRows(5);
        txtarDescripcion.setWrapStyleWord(true);
        scpDescripcion.setViewportView(txtarDescripcion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        pnlOperacions.add(scpDescripcion, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        pnlOperacions.add(filRecheo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(pnlOperacions, gridBagConstraints);

        lblPropietario.setText("Propietario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(lblPropietario, gridBagConstraints);

        cmbPropietarios.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPropietarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPropietariosItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(cmbPropietarios, gridBagConstraints);

        lblCan.setText("Can");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(lblCan, gridBagConstraints);

        cmbCans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCans.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCansItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(cmbCans, gridBagConstraints);

        pnlBotons.setLayout(new javax.swing.BoxLayout(pnlBotons, javax.swing.BoxLayout.X_AXIS));

        btnReservar.setText("Reservar");
        btnReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarActionPerformed(evt);
            }
        });
        pnlBotons.add(btnReservar);

        btnPechar.setText("Pechar");
        btnPechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPecharActionPerformed(evt);
            }
        });
        pnlBotons.add(btnPechar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(pnlBotons, gridBagConstraints);

        pnlRecursosNecesarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Recursos necesarios"));
        pnlRecursosNecesarios.setLayout(new java.awt.GridBagLayout());

        chkSangue.setText("Sangue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlRecursosNecesarios.add(chkSangue, gridBagConstraints);

        chkAnestesia.setText("Anestesia");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlRecursosNecesarios.add(chkAnestesia, gridBagConstraints);

        chkScaner.setText("Scaner");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlRecursosNecesarios.add(chkScaner, gridBagConstraints);

        chkRaios.setText("Raios");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlRecursosNecesarios.add(chkRaios, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(pnlRecursosNecesarios, gridBagConstraints);

        setBounds(0, 0, 714, 436);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPropietariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPropietariosItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
            String dniPropietario=modeloPropietarios.getElementAt(cmbPropietarios.getSelectedIndex()).getDni();
            cargarCans(dniPropietario);
        }
    }//GEN-LAST:event_cmbPropietariosItemStateChanged

    private void cargarCans(String dni)
    {
        modeloCans.removeAllElements();
        Vector cans=ConsultasSQL.recuperarTodolosCansDunPropietario(dni);
        if(cans==null)
        {
            JOptionPane.showMessageDialog(this, "Ocurreu un erro de base de datos ao recuperar os cans do propietario. Erro -11. Póñase en contacto co administrador", "Atención", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        else
        {
            for(int i=0;i<cans.size();i++)
            {
                modeloCans.addElement((Can)cans.elementAt(i));
            }
        }        
    }                    
    
    private void cmbCansItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCansItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
            //habilitarAltaVacinas();

        }
    }//GEN-LAST:event_cmbCansItemStateChanged

    private void cargarPropietarios()
    {
        modeloPropietarios.removeAllElements();
        Vector propietarios=ConsultasSQL.recuperarTodolosPropietarios();
        if(propietarios==null)
        {
            JOptionPane.showMessageDialog(this, "Ocurreu un erro de base de datos ao recuperar os propietarios. Erro -10. Póñase en contacto co administrador", "Atención", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        else
        {
            for(int i=0;i<propietarios.size();i++)
            {
                modeloPropietarios.addElement((Propietario)propietarios.elementAt(i));
            }
        }        
    }                
    
    private void btnReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarActionPerformed
        // TODO add your handling code here:
        if(cmbCans.getSelectedIndex()==-1)
        {
            JOptionPane.showMessageDialog(this, "Debe indicar o can para o que desexa reservar unha cita para operar", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String descripcionOperacion=txtarDescripcion.getText().trim();
        if(descripcionOperacion.compareTo("")==0)
        {
            JOptionPane.showMessageDialog(this, "Debe indicar a descripción da operación", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }        

        String data=txtData.getText().trim();
        if(data.compareTo("")==0)
        {
            JOptionPane.showMessageDialog(this, "Debe indicar a data da cita para a operación", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(!Datas.isData_Dia_BARRA_Mes_BARRA_Anho_Valida(data))
        {
            JOptionPane.showMessageDialog(this, "Data da cita non válida (dd/mm/aaaa)", "Atención", JOptionPane.WARNING_MESSAGE);
            return;            
        }                
        data=Datas.Data_Dia_BARRA_Mes_BARRA_AnhoAFormatoMySQLYYYY_GUION_MM_GUION_DD(data);         
        int numeroOperacionsGardadas=ConsultasSQL.recuperarNumeroDeOperacionsDunhaData(data);
        if(numeroOperacionsGardadas==-1)
        {
            JOptionPane.showMessageDialog(this, "Ocurreu un erro de base de datos ao recuperar o numero de operacións nunha data. Error -209. Póñase en contacto co administrador", "Atención", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        else
        {
            if(numeroOperacionsGardadas>0)
            {
                JOptionPane.showMessageDialog(this, "Data inválida. Xa hai unha operación programada para a data indicada", "Atención", JOptionPane.WARNING_MESSAGE);
                return;                            
            }
        }
        Operacion operacion=new Operacion(modeloCans.getElementAt(cmbCans.getSelectedIndex()).getChip(), descripcionOperacion, data,chkAnestesia.isSelected(), chkRaios.isSelected(), chkSangue.isSelected(), chkScaner.isSelected());
        if(ConsultasSQL.insertarOperacion(operacion)==-1)
        {
            JOptionPane.showMessageDialog(this, "Ocurreu un erro de base de datos ao insertar a cita da operación. Error -201. Póñase en contacto co administrador", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Cita de operación gardada", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
        dispose();
    }//GEN-LAST:event_btnReservarActionPerformed

    private void btnPecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPecharActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnPecharActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        XestorDeXanelas.pecharIFrmAltaOperacions();                
    }//GEN-LAST:event_formInternalFrameClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPechar;
    private javax.swing.JButton btnReservar;
    private javax.swing.JCheckBox chkAnestesia;
    private javax.swing.JCheckBox chkRaios;
    private javax.swing.JCheckBox chkSangue;
    private javax.swing.JCheckBox chkScaner;
    private javax.swing.JComboBox cmbCans;
    private javax.swing.JComboBox cmbPropietarios;
    private javax.swing.Box.Filler filRecheo;
    private javax.swing.JLabel lblCan;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblPropietario;
    private javax.swing.JPanel pnlBotons;
    private javax.swing.JPanel pnlOperacions;
    private javax.swing.JPanel pnlRecursosNecesarios;
    private javax.swing.JScrollPane scpDescripcion;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextArea txtarDescripcion;
    // End of variables declaration//GEN-END:variables
    private javax.swing.DefaultComboBoxModel<Propietario> modeloPropietarios;    
    private javax.swing.DefaultComboBoxModel<Can> modeloCans;        
}
